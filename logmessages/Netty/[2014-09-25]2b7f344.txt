  Fixing bugs in HTTP/2 pipeline exception handling  Motivation:  HTTP/2 codec does not properly test exception passed to exceptionCaught() for instanceof Http2Exception (since the exception will always be wrapped in a PipelineException), so it will never properly handle Http2Exceptions in the pipeline.  Also if any streams are present, the connection close logic will execute twice when a pipeline exception. This is because the exception logic calls ctx.close() which then triggers the handleInActive() logic to execute.  This clears all of the remaining streams and then attempts to run the closeListener logic (which has already been run).  Modifications:  Changed exceptionCaught logic to properly extract Http2Exception from the PipelineException.  Also added logic to the closeListener so that is only run once.  Changed Http2CodecUtil.toHttp2Exception() to avoid NPE when creating an exception with cause.getMessage().  Refactored Http2ConnectionHandler to more cleanly separate inbound and outbound flows (Http2ConnectionDecoder/Http2ConnectionEncoder).  Added a test for verifying that a pipeline exception closes the connection.  Result:  Exception handling logic is tidied up.  