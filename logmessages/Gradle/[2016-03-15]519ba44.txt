class MyTask extends DefaultTask { private String flags  @Input public String getCFlags() { flags }  public void setCFlags(String flags) { this.flags = flags } }  task('something', type: MyTask) {} ```  A simple task with an `@Input` property declared using a getter and a corresponding setter.  Running `gradle something` rightly shows an error message about the missing non-optional input:  ``` > No value has been specified for property 'cFlags'. ```  So, let's do what Gradle says:  ``` task('something', type: MyTask) { cFlags = "anything" } ```  But then `gradle something` shows the following error:  ``` > No such property: cFlags for class: MyTask_Decorated Possible solutions: CFlags, class ```  According to the JavaBean spec, the property name should be `CFlags`, not `cFlags`. Groovy respect the spec, we have a mismatch.  The issue is the same with a bunch of the JavaBeans spec corner cases like e.g. `getURL()` or `getcCompiler()`. It boils down to using `java.beans.Introspector.decapitalize()` instead of `o.a.commons.lang.StringUtils.decapitalize()`. We fixed the same issue in the software model in 2.11.  All in all, this commit fix the validation error messages. It may break builds that use `task.getInputs().getProperties().get("...")` and rely on wrong property names.  +review REVIEW-5878  