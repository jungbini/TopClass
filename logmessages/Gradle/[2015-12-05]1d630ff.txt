  Rework how nodes are discovered in scope, add `@Hidden` annotation  Theres an issue with closing scopes (most importantly the <root> scope) too early when rules reference their inputs by type. In such a case we need to force the discovery of all children of the scope node in order to find a node that can be viewed as the given type.  Closing the scope, though (especially when its the <root> scope) means that rules applied later will not be able to create further nodes in the scope (since it is already in SelfClosed).  To avoid having to close the scope, we can try to discover the children that are already registered first, and only close the node if a node is not already registered. This is exactly what we did previously.  However, if discovering such a node require inputs to be closed, a cascade effect can still start. This change tries avoid this situation further by first discovering only the children of the scope that can be discovered without having to close any other nodes. If the a node viewable as the requested type can be found among these (now discovered) children, we dont need to explore the scope any further.  These children can be called self-discovering. The vast majority of nodes (except for managed model elements created via @Model currently, and extensible nodes like BinarySpec) are self-discovering.  Previously we had the @Service annotation to do something similar to self-discovery, but in an explicit way. @Service marked a @Meodel element to be pushed to Discovered upon registration. The problem with this is we already started executing rules before all the rules could have been extracted from RuleSources and the model DSL, which could lead to nodes being closed prematurely. This change surpasses the need for the @Service annotation, and fixes the early execution of rules. Nodes dont need to be pushed to Discovered upon registration anymore, as they are discovered only as needed.  A new @Hidden annotation was also introduced in order to take over the second role of @Service. This annotation should probably be moved into the public API eventually.  +review REVIEW-5735  