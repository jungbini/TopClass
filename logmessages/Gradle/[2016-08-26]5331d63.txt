nce test which simulates the behavior of Gradle under Android Studio. The first simulation is based on project synchronization and relies on previous work found on the android-studio-sync-test (https://github.com/adammurdoch/android-studio-sync-test) project.  It's worth noting that the classes in `internal-android-performance-testing` are collecting some statistics which are *not* used when generating the reports. This commit just setups the basic infrastructure for performance testing of Android projects in the context of Android Studio.  Some implementation notes:  - the custom model used when calling the Tooling API live in a dedicated project (`internalAndroidPerformanceTesting`) so that we can generate a JAR that can in turn be added to the classpath when executing the test. This allows us to precompile the model class and limit the impact of using Groovy to collect statistics. - the `internalAndroidPerformanceTesting` project uses a trick to workaround an issue with some Android dependencies which provide a `gradle-core` jar. This is problematic because our module lookup finds this jar first and tries to load it as the main Gradle module, although it's not. For that reason, the dependencies are renamed (prefixed with `android-`) and added to the classpath, avoiding this name clash. - this classpath, as well as the generated custom model classes, are written in a `tapi-classpath.txt` file which is then used by the performance test runner to set the tooling api classpath.  