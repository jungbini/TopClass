  Fix Memory Leak in xml_io.c This example will use up all system memory:  require 'nokogiri'  class BadIO def read(*args) raise 'hell' end end  100000000.times do Nokogiri::XML.parse(BadIO.new) rescue nil end  The example above is obscure, but imagine an HTTP object raising TimeoutError. Nokogiri leaks memory every time this happens.  I became suspicious of this when looking at ext/nokogiri/xml_io.c. io_read_callback() is invoked in the middle of some libxml operation, which may not behave well when a ruby exception is thrown and it gets interrupted. It seems that the safe way to handle this is to wrap the method call in rb_rescue.  Note that the same applies to io_write_callback() in xml_io.c. Although I did not notice a memory leak with io_write_callback(), wrapping with rb_rescue() seems like the correct thing to do in both cases.  A side effect of this fix is that IO errors will be silently discarded.  