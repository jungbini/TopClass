 Merging titan03 with strategy "ours"  titan03 contains four commits since its last merge into master.  The first commit resets titan03 to a common ancestor commit of both titan03 and master.  The next commit is a mass-cherry-pick containing a subset of master's commits following the common ancestor (just bugfixes and optimizations).  The third commit is a .gitignore change that is already separately committed in master.  The fourth commit changes the Titan version from 0.3.1 to 0.3.2-SNAPSHOT.  This change is not in master and it should also never go into master.  Therefore, the contents of all four titan03 commits are either already in master (first three) or would be discarded during a merge (last one).  This merge has no effect on master's tree.  commit 784b0faeeb5b5e9a7644a36f38acebc832c28384  Stop caching lock column values  If writing a lock claim to a storage backend took longer than LOCK_WAIT_MS to complete, then later attempts to verify that lock claim would generate a guaranteed "timestamp mismtach" PermanentLockingException.  This should now be fixed.  This was due to an interaction between ConsistentKeyLockTransaction#writeBlindLockClaim(...) and LockClaim#getLockCol(long ts, byte[] rid).  The former calls the latter.  The latter calculated a return value only on its first invocation, cached it, and then returned it on that and all subsequent invocations.  It did this even if the ts argument, on which the return value depended, varied between invocations.  In cases where a lock claim write took longer than LOCK_WAIT_MS to succeed, this caching behavior made retries write a stale timestamp and later caused a "timestamp mismatch" exception.  This commit makes getLockCol(...) calculate its return value on every invocation.  This should alleviate one potential cause of timeout mismatch exceptions as discussed in #302.  