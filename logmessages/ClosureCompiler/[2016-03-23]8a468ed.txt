  Rewrite the logic for folding comparisons in PeepholeFoldConstants  evaluateComparison() is now based on the three Abstract Operations defined in the ES6 Specs: Abstract Relational Comparison [1], Abstract Equality Comparison [2] and Strict Equality Comparison [3].  This fixes a handful of foldable cases that were not folded previously:  Cases like `0 < null` and `'hi' < null` are now folded.  String-string comparisons and string-number comparisions like `'a' < 'b'` and `1 < '2'` are now folded.  Cases involving NaN are now folded.  As a bonus, a test case in testOptimizeSwitch() in PeepholeRemoveDeadCodeTest now folds.  [1] http://www.ecma-international.org/ecma-262/6.0/#sec-abstract-relational-comparison [2] http://www.ecma-international.org/ecma-262/6.0/#sec-abstract-equality-comparison [3] http://www.ecma-international.org/ecma-262/6.0/#sec-strict-equality-comparison  Merge pull request #1591 from Dominator008/closure-compiler Closes https://github.com/google/closure-compiler/pull/1591  ==================================================================  Switch String additions to StringBuilder.appends, where appropriate  