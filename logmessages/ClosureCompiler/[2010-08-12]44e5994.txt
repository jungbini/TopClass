  Experimental initial module specialization.  This optimization replaces functions in the initial module with specialized versions that are only safe in the initial module. The original, general, versions of the functions are "fixed up" in later modules. This optimization can shrink the initial module significantly but the fixup code in later modules increases overall code size.  See SpecializeModule.java for more details.  This change modifies three existing passes: DevirtualizePrototyMethods, InlineFunctions, and RemoveUnusedPrototypeProperties, to be specialization-aware. When running under specialization, these modules now ask before modifying or removing a function and report what functions they have modified or removed.  Files meriting extra scrutiny: - DevirtualizePrototypeMethods.java - RemoveUnusedPrototypeProperties.java - InlineFunctions.java - DefaultPassConfig.java  R=acleung DELTA=1820  (1810 added, 0 deleted, 10 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=103003   git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@353 b0f006be-c8cd-11de-a2e8-8d36a3108c74  