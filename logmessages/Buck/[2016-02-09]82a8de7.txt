  Add support for BUCK.autodeps.  Summary: This revision introduces support for a `BUCK.autodeps` file that is an optional file that can sit alongside a `BUCK` file to declare additional `deps` for any build rules inside the `BUCK` file. The `BUCK.autodeps` file is a JSON file with a special header that must contain the SHA-1 of the JSON it contains. (Currently the verification step for checking the header is disabled to make it easier to debug while we're still experimenting with this feature.)  The goal of this feature is to unlock the ability to add tooling to autogenerate the bulk of a `BUCK` file. With some cleverness, it should often be possible to derive the `deps` of a `java_library()` from the `import` statements in the `srcs`. Sometimes this is not possible because there could be something that is loaded via reflection that cannot be determined statically. The goal of this scheme is to support both scenarios. Example:  ``` # BUCK java_library( name = 'uses_foo_and_bar', srcs = glob(['*.java']), # There exists a source that imports foo. deps = [ '//java/bar:that_is_used_reflectively', ], )  # BUCK.autodeps #@# GENERATED FILE: DO NOT MODIFY b93d233448e9365a108acdaed1749f65fb2d1bdb #@# { "bar": [ "//java/foo:foo" ] } ```  When Buck parses the `BUCK` file, it notices the presence of the `BUCK.autodeps` file and parses it first, verifying the signature therein. It applies this information when interpreting the `BUCK` file, so the net effect is interpreting the rule as:  ``` java_library( name = 'uses_foo_and_bar', deps = [ '//java/bar:that_is_used_reflectively', '//java/foo:foo', ], ) ```  Test Plan: Created `ParserIntegrationTest#testUsingAutodeps()`.  Reviewed By: marcinkosiba  fb-gh-sync-id: 6ffc0c3 shipit-source-id: 6ffc0c3  