  Work around unfortunate `javac` behavior when annotation processors report an error  Summary: Annotation processors create new classes which are actually allowed to be referenced from the very code that contains the annotations. To accomplish this, `javac` suppresses missing symbol errors (recoverable errors) until after all annotation processors have run.  However, theres a bug. If an annotation processor reports an error, `javac` will dump all the missing symbol errors *twice*  once before and once after the error from the annotation processor. This results in the annotation processor errorthe root cause of the build failurebeing buried almost exactly in the middle of the error spew.  Furtherand this is not a bugif an unrecoverable error exists in the code (such as a syntax error), `javac` will not run annotation processors at all. In that case, errors are printed in the order in which they were encountered, and its quite possible for the syntax error to be buried in missing symbol errors that would have gone away if the annotation processors had run.  To work around this, we remove duplicates messages and sort the most common types of recoverable errors to the end of the list. This should result in unrecoverable errors and errors from annotation processors appearing first in the error list. Over time we may find some more error types that we want to push later.  Were relying on internal `javac` details for this (the error codes), but this hasnt changed in a while, and the worst case scenario if it does change is that we start reporting errors in a suboptimal order again.  Test Plan: New unit tests  Reviewed By: asp2insp  fbshipit-source-id: 6eae708  