  Ignore dot-files in `glob()`ed paths.  Summary: Python's `glob()` ignores files and directories whose names start with '.'.  Our hand-rolled glob() should do the same. Otherwise, builds fail when Emacs creates dangling dot-file symlinks for its backup files:  ``` java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.io.FileNotFoundException: /path/to/buck/src/com/facebook/buck/apple/xcode/xcodeproj/.#PBXBuildFile.java (No such file or directory) at com.facebook.buck.util.DefaultFileHashCache.get(DefaultFileHashCache.java:76) at com.facebook.buck.rules.RuleKey$Builder.setInputVal(RuleKey.java:270) at com.facebook.buck.rules.RuleKey$Builder.setInputs(RuleKey.java:256) at com.facebook.buck.rules.AbstractCachingBuildRule.appendToRuleKey(AbstractCachingBuildRule.java:118) at com.facebook.buck.java.DefaultJavaLibraryRule.appendToRuleKey(DefaultJavaLibraryRule.java:506) at com.facebook.buck.rules.AbstractBuildRule.getRuleKeyPair(AbstractBuildRule.java:171) at com.facebook.buck.rules.AbstractBuildRule.getRuleKey(AbstractBuildRule.java:152) at com.facebook.buck.rules.AbstractCachingBuildRule.getRuleKey(AbstractCachingBuildRule.java:51) at com.facebook.buck.rules.AbstractCachingBuildRule$1$1.get(AbstractCachingBuildRule.java:180) at com.facebook.buck.rules.AbstractCachingBuildRule$1$1.get(AbstractCachingBuildRule.java:173) at com.google.common.base.Suppliers$MemoizingSupplier.get(Suppliers.java:125) at com.facebook.buck.rules.AbstractCachingBuildRule$1.onSuccess(AbstractCachingBuildRule.java:200) at com.facebook.buck.rules.AbstractCachingBuildRule$1.onSuccess(AbstractCachingBuildRule.java:149) at com.google.common.util.concurrent.Futures$4.run(Futures.java:1169) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:744) ```  This fixes the issue by ensuring the filter for our hand-rolled `glob()` ignores files and directories whose names start with '.'.  When I tested this, I found one of Buck's Java tests fails whenever there's a dangling symlink in the source tree. I fixed that as well.  Test Plan: Updated buck_test.py. Ran ant py-test. It passes.  Manually created a dangling symlink file with a name starting with '.' in a directory matched by a `**/*.java` rule. Previously, `buck build` failed.  Now, it passes.  