  [RFC] Add an `Args` abstraction to simplify `BuildRule`s  Summary: Our `BuildRule`s are supporting more types of post-processing which they need to apply to arguments they pass into external tools. Currently, we have: - Normal string arguments - Arguments which are `SourcePath`s, which need to be passed in as a separate collection so they are added to the rule key properly (and in a way that supports input-based rule keys). - String arguments which need to be sanitized before being added to the rule key, which means we're threading in objects like the `DebugPathSanitizer` to rules that do this, and requiring these rules also implement `RuleKeyAppendable` to perform the sanitization. - String arguments which require macro expansion, which requires work in the description and extra args in rules to pass in the unexpanded arg, an expander function, and any extra components found by the description that need to be added to the rule key when using it (e.g. `Genrule`, and recent macro support to C/C++ linker rules is broken since we're not threading in enough information).  All this is making writing new rules really flaky and cluttered, so this 