  Fix native buffer leaks from ZipFile.getInputStream()  Summary: Running `buck build buck` under jemalloc with profiling enabled, I noticed a number of native buffer leaks in `inflateInit2_` and `Java_java_util_zip_Inflater_init`:  % LD_PRELOAD=/path/to/jemalloc/lib/libjemalloc.so.2 \ MALLOC_CONF=prof:true,lg_prof_sample:1,prof_accum:false,lg_prof_interval:30,prof_prefix:jeprof.out \ ./bin/buck build buck  % /path/to/jemalloc/bin/jeprof --show_bytes /usr/local/bin/java jeprof.out.2171615.16.i16.heap Using local file /usr/local/bin/java. Using local file jeprof.out.2171615.16.i16.heap. Welcome to jeprof!  For help, type 'help'. (jeprof) top Total: 198141237 B 90542080  45.7%  45.7% 90542080  45.7% inflateInit2_ 85919713  43.4%  89.1% 85919713  43.4% os::malloc 16318464   8.2%  97.3% 16318464   8.2% updatewindow 3145728   1.6%  98.9%  3145728   1.6% init 867200   0.4%  99.3%   867200   0.4% readCEN 848832   0.4%  99.7% 91390912  46.1% Java_java_util_zip_Inflater_init 221184   0.1%  99.9%   221184   0.1% ObjectSynchronizer::omAlloc 137216   0.1%  99.9%   137216   0.1% deflateInit2_ 24000   0.0%  99.9%    24000   0.0% _dl_allocate_tls 17328   0.0%  99.9%    17328   0.0% _dl_new_object  These are all native buffers owned by `ZipFileInputStream`, which is usually created by `ZipFile.getInputStream()`.  I found number of places where we failed to explicitly close the streams returned by `ZipFile.getInputStream()`. The docs say `ZipFile.close()` is supposed to close all those streams, but that's broken at least once in the past:  https://bugs.openjdk.java.net/browse/JDK-8000912  Either this has regressed in Java 8, or we're failing to close a `ZipFile`. I couldn't find any instances of the latter, so I'm assuming the former.  Either way, it doesn't hurt to explicitly close the `InputStream`s returned by `ZipFile.getInputStream()`. Once I do so, the native heap looks a lot better:  % ~/local/src/jemalloc/bin/jeprof --show_bytes /usr/local/bin/java jeprof.out.2353607.15.i15.heap Using local file /usr/local/bin/java. Using local file jeprof.out.2353607.15.i15.heap. top Welcome to jeprof! For help, type 'help'. (jeprof) Total: 94768004 B 86887265 91.7% 91.7% 86887265 91.7% os::malloc 3145728 3.3% 95.0% 3145728 3.3% init 2119680 2.2% 97.2% 2119680 2.2% inflateInit2_ 1146880 1.2% 98.5% 1146880 1.2% updatewindow 842960 0.9% 99.3% 842960 0.9% readCEN 270336 0.3% 99.6% 270336 0.3% ObjectSynchronizer::omAlloc 202752 0.2% 99.8% 202752 0.2% deflateInit2_ 24000 0.0% 99.9% 24000 0.0% _dl_allocate_tls 19872 0.0% 99.9% 2139552 2.3% Java_java_util_zip_Inflater_init 17328 0.0% 99.9% 17328 0.0% _dl_new_object  I ran JProfiler and confirmed the rest of the `deflateInit2_` are owned by `URLClassLoader`, which I don't think we are leaking.  I also found a few other `InputStream`s which we were passing to `InputStreamReader` and thus leaking  Test Plan: See above re: jeprof  