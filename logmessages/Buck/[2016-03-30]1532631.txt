  Change how generated_symbols are calculated for java_immutables_library().  Summary:The high level idea is that I want to introduce the following invariant:  **All uses of `java_immutables_library()` must have a non-empty `immutable_types` argument.**  Here are the concrete benefits to this: 1. This will make it easier to implement the `standard_java_library()` macro because it can rely on this heuristic to determine whether to generate a `java_library()` or a `java_immutables_library()`. 2. It will make `buck autodeps` more accurate because it turns out there are many uses of immutables that do not conform to the expectations of the `immutable_srcs` argument as it exists today. 3. It will reduce the number of arrays of `.java` files we have to create in `BUCK` files. See `src/com/facebook/buck/android/BUCK` as an example. 4. It reduces the chance that we create a `java_immutables_library()` that could be a `java_library()`.  Today, there are uses of `java_immutables_library()` that do not specify `immutable_srcs`. I thought this was a bug (that is, they should have been rules that were `java_library()` instead), but I was wrong. We have a number of cases where `BuckStyleImmutable` is not used on a top-level type in a `.java` file, but is used for package-private inner classes. These inner classes cannot be included in the `immutable_srcs` as it works today, which is how we end up with uses of `java_immutables_library()` that do not specify `immutable_srcs`, but must run the immutables.org annotation processors.  By changing to `immutable_types` instead of `immutable_srcs`, we can now reference these types properly in the `BUCK` files and no longer need to filter out the "immutables sources" from the rest of the `srcs`, which will simplify uses of `glob()`.  Test Plan: CI  Reviewed By: yiding  fb-gh-sync-id: 5719570 fbshipit-source-id: 5719570  