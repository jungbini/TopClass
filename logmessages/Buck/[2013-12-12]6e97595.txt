  Serve build traces via HTTP when running buckd.  Summary: `buckd` is already running a web server for the experimental Buck IntelliJ plugin.  This piggybacks off of that work by adding a few servlets to that web server needed to serve Chrome traces:  * A `ResourceHandler` to serve the static `trace_viewer.css` and `trace_viewer.js` files that contain the UI for the embedded Chrome Trace viewer. These resources were generated from https://code.google.com/p/trace-viewer/ using the following bug fix: https://code.google.com/p/trace-viewer/issues/detail?id=478. * A `TraceDataHandler` that acts as a JSONP endpoint to serve data from the user's `buck-out/log/traces/` directory. It handles URLs of the form `http://localhost:9011/tracedata/2cS9z5Ie?callback=onTraceLoaded`, wrapping the JSON from `buck-out/log/traces/build.2cS9z5Ie.trace` in a call to `onTraceLoaded()` (as you would expect from a JSONP endpoint). * A `TraceHandler` that loads the Chrome Trace viewer with data by generating an HTML page with `<script>` tags that load data from the other two handlers.  Now, if `buckd` is running and a port has been specified in `.buckconfig`, a URL like the following will be printed to the console: `http://localhost:9011/trace/{id}`. Opening this link in Google Chrome will display the trace for the build that just finished.  Test Plan: Add the following to `.buckconfig.local`:  ``` [httpserver] port = 9011 ```  Then run `buckd && buck --version` to ensure `buckd` is up and running.  Then visit `http://localhost:9011/trace/{id}` where `{id}` is the id of a trace in your `buck-out/log/traces` directory.  