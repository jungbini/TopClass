  Perf: Use per-thread cache of Calendar objects for calculating zip entry dates  Summary: JProfiler showed we were creating over 150,000 `Calendar` objects for each `buck build buck` (about 30 MiB of memory).  While these objects are not thread-safe, it's fine to re-use them as long as we don't use them across threads.  Since `EntryAccounting` is the only place in Buck that uses `Calendar`s, I took the easy way out and introduced a `ThreadLocal<Calendar>` cache to re-use the Calendars.  I also noticed we were not specifying a `Locale` when creating the `Calendar`. That meant for Buck users in countries like Thailand that don't use the Gregorian calendar, we were creating invalid ZIP files with years like 2558 instead of 2015.  I fixed this by passing `Locale.US`, since we don't really want to create ZIP files with localized calendar years.  Test Plan: `buck build buck`, used JProfiler to confirm many hundreds of thousands fewer `Calendar` objects created.  Reviewed By: sdwilsh  fb-gh-sync-id: ff9b1eb  