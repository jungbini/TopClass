  Reset output key after executing a caching rule  Summary: Not sure if this always happens, but I got into a state where a genrule kept re-executing because  - It would compute the output key by sha1'ing the file, and caching the the result in memory. - It would see that the sha1 didn't match the output key in the .success file, so it would re-run the rule. - The rule was outputting a zip file, which means that it is nondeterministic because zip files include timestamps. - Finally, it would recreate the .success file, using the cached (and therefore wrong) output key. - The next build would do the same thing.  My hacky fix for this is to drop the key after running the commands that execute the rule, but I have no idea if the policy of perma-caching sha1 values is causing other bugs in the tree.  As a side note, the practice of using raw sha1 values as cache keys seems like a huge problem for distributed caching when we have nondeterministic build steps (like building JARs).  Test Plan: Built.  Saw that the infini-rebuild loop stopped.  