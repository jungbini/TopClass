  Properly support multiple OutputStreams in ConsoleHandler  Summary: ConsoleHandler had a few nasty bugs that were revealed once @jimp enabled multiple concurrent "read-only" commands like `buck audit classpath`.  1) The most recently registered buck client was the only one which received console output. Any earlier clients stopped receiving crucial output (like exceptions raised inside Buck).  2) When I fixed this, I realized we had to filter log messages so only ones created on threads for the command ID created for the client should by emitted.  3) While testing multiple concurrent consoles, I realized whenever we reloaded LogManager's configuration, it tore down our ConsoleHandler and all its state, so I factored out its state, including the log level override for --verbose=10.  4) I also found that we never flushed the console when error messages were sent, so they were batched up and flushed at the end.  5) I also found that Java 7 try-with-resources blocks clean up the resources *before* any catch or finally blocks are invoked, which means the top-level block in Main to run the command, catch and log exceptions, and exit prematurely unregistered the <thread ID: command ID> map, so the log was missing the command ID.  To fix all these, I added two more maps to GlobalState to hold <command ID: output stream> pairs and <command ID: log level override> pairs, used them in ConsoleHandler, and added lots of tests.  Depends On D1519662 Depends On D1519666 Depends On D1519668 Depends On D1519676 Depends On D1519677  Test Plan: Unit tests included. Manually tested by running:  buck audit classpath //lib:ddmlib buck audit classpath //lib:ddmlib --verbose=10  from two concurrent consoles, confirming the verbose output only went to one.  Manually induced an exception to be thrown in `AuditCommandRunner`. Repeated manual test. Confirmed the exception was printed separately to each console.  