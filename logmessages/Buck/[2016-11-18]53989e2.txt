  IncludeLog: preprocess c/c++, record metadata about includes  Summary: When building C/C++ sources we record `dep` files, which essentially is a listing of dependencies, i.e. all the files that go into the build: the c/cpp file, headers, headers-included-by-headers, and so on.  For precompiled header support, we will need the same info and a bit more.  To determine compatibility of a preexisting PCH, we need to 1) record the build flags (like `-O3 -g -fomit-frame-pointer`); and (2) the relevant information about include paths.  The first is used to determine whether the prebuilt code/structures are a match for a subsequent build; prebuilt stuff would have to "agree" in terms of debug info, optimizations, and even `#define`'s used during the build.  That list of flag strings can be hashed and used as part of the rule key (as it is now).  For part (2) it's more tricky.  Of course we could include //all// the build flags, including the path information in (2), e.g. `-I` and `-isystem` and so on, and we're done.  And that would not produce incorrect results.  However the number of combinations of include paths is large and will result in //too many// PCH's, with little reuse.  Empirically this resulted in build times breaking even with builds not involving PCHs, and being even worse in other cases (when there are many rules).  Simply dropping all `-I` and other include path flags would result in a greatly decreased number of PCHs, and in a local informal benchmark, but down build time for a large project quite a bit!  However this is dangerous; imagine that the required system libraries between two builds 